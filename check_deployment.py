#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra deployment v√† dependencies
"""

import sys
import importlib
import requests

def check_dependency(module_name, package_name=None):
    """Ki·ªÉm tra m·ªôt dependency c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t kh√¥ng"""
    try:
        importlib.import_module(module_name)
        print(f"‚úÖ {package_name or module_name} - OK")
        return True
    except ImportError:
        print(f"‚ùå {package_name or module_name} - MISSING")
        return False

def check_django_settings():
    """Ki·ªÉm tra c·∫•u h√¨nh Django"""
    try:
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kho_my_pham.settings')
        
        import django
        django.setup()
        
        from django.conf import settings
        
        print("\nüîß Django Settings Check:")
        print(f"‚úÖ DEBUG = {settings.DEBUG}")
        print(f"‚úÖ ALLOWED_HOSTS = {settings.ALLOWED_HOSTS}")
        print(f"‚úÖ STATIC_ROOT = {settings.STATIC_ROOT}")
        print(f"‚úÖ DATABASES = {list(settings.DATABASES.keys())}")
        
        return True
    except Exception as e:
        print(f"‚ùå Django Settings Error: {e}")
        return False

def check_static_files():
    """Ki·ªÉm tra static files"""
    try:
        from django.conf import settings
        from django.core.management import execute_from_command_line
        
        # Ch·∫°y collectstatic ƒë·ªÉ ki·ªÉm tra
        execute_from_command_line(['manage.py', 'collectstatic', '--dry-run', '--noinput'])
        print("‚úÖ Static files collection - OK")
        return True
    except Exception as e:
        print(f"‚ùå Static files Error: {e}")
        return False

def main():
    """Main function"""
    print("üöÄ Kho My Pham - Deployment Check")
    print("=" * 50)
    
    # Danh s√°ch dependencies c·∫ßn ki·ªÉm tra
    dependencies = [
        ('django', 'Django'),
        ('PIL', 'Pillow'),
        ('openpyxl', 'openpyxl'),
        ('reportlab', 'reportlab'),
        ('crispy_forms', 'django-crispy-forms'),
        ('crispy_bootstrap5', 'crispy-bootstrap5'),
        ('psycopg2', 'psycopg2-binary'),
        ('decouple', 'python-decouple'),
        ('dj_database_url', 'dj-database-url'),
        ('whitenoise', 'whitenoise'),
        ('requests', 'requests'),
        ('pandas', 'pandas'),
        ('xlrd', 'xlrd'),
    ]
    
    # Dependencies ch·ªâ c·∫ßn thi·∫øt cho production
    production_dependencies = [
        ('gunicorn', 'gunicorn'),
    ]
    
    print("\nüì¶ Dependencies Check:")
    print("-" * 30)
    
    all_ok = True
    for module, package in dependencies:
        if not check_dependency(module, package):
            all_ok = False
    
    print("\nüì¶ Production Dependencies Check:")
    print("-" * 40)
    
    production_ok = True
    for module, package in production_dependencies:
        if not check_dependency(module, package):
            print(f"‚ö†Ô∏è  {package} - MISSING (ch·ªâ c·∫ßn cho production)")
            production_ok = False
        else:
            print(f"‚úÖ {package} - OK")
    
    # Ki·ªÉm tra Django settings
    django_ok = check_django_settings()
    
    # Ki·ªÉm tra static files
    static_ok = check_static_files()
    
    print("\n" + "=" * 50)
    if all_ok and django_ok and static_ok:
        print("üéâ T·∫•t c·∫£ ki·ªÉm tra ƒë·ªÅu PASSED!")
        print("‚úÖ ·ª®ng d·ª•ng s·∫µn s√†ng ƒë·ªÉ deploy")
        if not production_ok:
            print("‚ö†Ô∏è  L∆∞u √Ω: M·ªôt s·ªë dependencies production ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            print("   (ƒêi·ªÅu n√†y b√¨nh th∆∞·ªùng trong m√¥i tr∆∞·ªùng development)")
    else:
        print("‚ö†Ô∏è  C√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c:")
        if not all_ok:
            print("   - Thi·∫øu m·ªôt s·ªë dependencies")
        if not django_ok:
            print("   - L·ªói c·∫•u h√¨nh Django")
        if not static_ok:
            print("   - L·ªói static files")
        print("\nüí° H√£y c√†i ƒë·∫∑t c√°c dependencies thi·∫øu:")
        print("   pip install -r requirements_production.txt")
    
    return all_ok and django_ok and static_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 